EtwTracingSample
----------------

This sample illustrates how to create a WebAPI ITraceWriter
implementation to write to Event Tracing for Windows (ETW).
ETW is described at:
   http://msdn.microsoft.com/en-us/magazine/cc163437.aspx

This solution consists of the following 3 projects:

  1. EtwManifestGenerator.csproj:
       This project is a stand-alone console app that generates
       an ETW manifest from an EventSource.  It is included here
       as a tool and is used to generate the manifest for the
       WebApiEtwEventSource when the solution is built.

  2. WebApiEtwTracing.csproj:
       This project contains the WebApiEtwTraceWriter that can be
       registered into an HttpConfiguration to cause WebApi core code
       to trace to ETW.

       This project also contains WebApiEtwEventSource, which is
       the ETW EventSource used by WebApiEtwTraceWriter.

       EventSource makes it easy to create a custom ETW event source,
       and you can read more about it at:
       http://msdn.microsoft.com/en-us/library/system.diagnostics.tracing.eventsource.aspx

  3. ConsoleDemo.csproj:
       This project is a console app that creates a WebApiEtwTraceWriter and
       generates several HTTP requests through an in-memory client/server connection.

       By running this demo, the WebApi core code will generate ETW
       events you can view.  See how to view the results below.

The ETW Manifest
----------------
The solution also includes the file WebApiEtwTracing.man.  This is the manifest
file that describes the ETW events emitted by this sample.  It is generated while
building the solution using EtwManifestGenerator.exe, specifying the WebApiEtwTracing
assembly as its input.

You do not need to modify WebApiEtwTracing.man.  It will be regenerated every time
the solution is built.  If you change any of the events in WebApiEtwEventSource, those
changes will automatically be reflected in the new version of the manifest.

This manifest file is generally required only by tools that view ETW traces.
It describes characteristics of each event for this specific ETW provider, allowing
the viewing tools to give a more readable presentation of the traces.


How WebApiEtwTracing works
--------------------------
WebApiEtwTraceWriter is an implementation of WebAPI's ITraceWriter.
When WebAPI finds an ITraceWriter in its HttpConfiguration, it causes the core
code to trace all activities through the WebApiEtwTraceWriter.Trace() method.

WebApiEtwTraceWriter's Trace() method does some filtering (which you can control)
and passes selected traces to the appropriate WebApiEtwEventSource method.  This
emits a unique ETW event for each method.

If an ETW controller is running and listening to this event source, those ETW
events will be captured.  If no controller is listening, those ETW events will
be discarded.   See below for instructions regarding ETW controllers.

It is worth observing that ETW event providers are identified by a GUID.
The GUID for this sample is {fc7bbb67-1b01-557b-5e0e-c1c4e40b6a24}.
Some tools such as logman require this GUID to identify the ETW provider.
Other tools such as PerfView can extract the GUID from the EventSource metadata.


Running ConsoleDemo
-------------------
ConsoleDemo.exe demonstrates the sample ETW trace writer by registering
a WebApiEtwTraceWriter and issuing several HTTP requests, causing ETW
events to be generated describing what the WebAPI core code is doing.

There are 2 ways to run ConsoleDemo:
  1. Run "ConsoleDemo.exe" (no parameters) to simply emit ETW trace events.
     These will be captured only if an ETW controller is already running.
     See below for how to view these in PerfView.

  2. Run "ConsoleDemo.exe myLog.etl" to emit these same ETW trace events
     into a file.

The logman tool is required to use option #2.  Logman is included with the
Windows operating system, and you can read more about it at:
   http://msdn.microsoft.com/en-us/library/dd264809.aspx

When you use option #2, ConsoleDemo will write its ETW events to the specified file.
This file can be opened by any ETL viewing tool such as tracerpt, xperf, PerfView etc.


Tracing with PerfView
---------------------
You can also run ConsoleDemo from within a tool called PerfView.  This tool
is both an ETW controller as well as an ETL viewer (as well as many other things),
and you can use it interactively to see the ETW events generated by ConsoleDemo.

Perfview was built by the Microsoft CLR team and can be downloaded from:
   http://www.microsoft.com/en-us/download/details.aspx?id=28567.

To see the ETW traces generated by ConsoleDemo, follow these steps:
  1. Install and start PerfView.exe
  2. Choose the Collect | Run menu option
  3. Set the Command edit box to "ConsoleDemo.exe"	[use the full path]
  4. Choose the Advance Options drop-down
  5. Enter "*WebApi" into Additional Providers		[omit quotes, but asterisk is required]
  6. Press Run Command

  PerfView will run the ConsoleDemo and act as an ETW controller listening
  for some standard ETW event sources.  The "*WebApi" tells it to listen
  to the WebApi event source too.  After PerfView has finished running
  ConsoleDemo, it will stop blinking, and you can follow these steps:
    1. Expand the PerfViewData.etl you see in the left-hand pane.
    2. Double-click the Events view

This will show all ETW traces captured while ConsoleDemo was running.
Type "webapi" into the Filter edit box (case-insensitive), and you will
filter to only those emitted by the WebApi event source.  Notice that
each request has a unique "ActivityID", and you can further filter the
text to look at only a single request.

You can also use PerfView to view an existing .etl file, including the
one generated by "ConsoleDemo.exe myLog.etl".

PerfView is an incredibly useful tool for analyzing CPU usage, call stacks, 
heaps, events, ASP.NET traffic, etc.  It is worth learning and using.
Follow Vance Morrison's blogs and video tutorials to learn more at:
http://blogs.msdn.com/b/vancem/archive/2011/12/28/publication-of-the-perfview-performance-analysis-tool.aspx
